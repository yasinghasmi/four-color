name: main - production synchronization

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - production

jobs:
  # Job A: whenever main gets a new push (merge or commit), creating a PR to production
  create-production-pr:
    if: ${{ github.ref == 'refs/heads/main' &&  !startsWith(github.event.head_commit.message, 'Revert') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out main
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Get the squashed commit subject
        id: get_subject
        run: |
          SUBJECT=$(git log -1 --pretty=format:%s $GITHUB_SHA)
          echo "SUBJECT=$SUBJECT" >> $GITHUB_ENV

      - name: Extract PR number from subject
        id: get_pr_ref
        run: |
          set -euo pipefail
          PR_NUM=$(echo "$SUBJECT" | sed -nE 's/.*\(#([0-9]+)\).*/\1/p')
          echo "PR_NUM=$PR_NUM" >> $GITHUB_ENV

      - name: Derive clean title
        id: get_title
        run: |
          PR_TITLE=$(echo "$SUBJECT" | sed -E 's/ *\(#\d+\)$//')
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

      - name: Derive ticket key for branch name
        id: get_ticket
        run: |
          RAW_CONTENT=$(
            echo "$PR_TITLE" \
            | grep -oE '\([^)]+\)' \
            | head -n1 \
            | tr -d '()'
          )
          NUM=$(echo "$RAW_CONTENT" | grep -oE '[0-9]+' || echo '')
          if [ -n "$NUM" ]; then
            TICKET="EC-${NUM}"
          else
            TICKET="$GITHUB_SHA"
          fi
          echo "TICKET=$TICKET" >> $GITHUB_ENV

      - name: Fetch & switch to production
        run: |
          git fetch origin production
          git checkout production

      - name: Create & switch to prod-branch
        run: |
          BRANCH="prod-${TICKET}"
          git checkout -b "$BRANCH"

      - name: Configure Git committer
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry-pick the squashed commit
        run: |
          git remote add main_repo "${{ github.server_url }}/${{ github.repository }}.git"
          git fetch main_repo main
          git cherry-pick $GITHUB_SHA --allow-empty

      - name: Push prod-branch back to origin
        run: |
          git push --set-upstream origin "prod-${TICKET}"

      - name: Compute PR body text
        id: compute_body
        run: |
          set -euo pipefail

          COMMIT_LINK="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
          echo "COMMIT_LINK=$COMMIT_LINK" >> $GITHUB_ENV

          if [ -n "$PR_NUM" ]; then
            PR_LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${PR_NUM}"
            echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV

            echo "PR_BODY=Cherry-pick of commit \`${GITHUB_SHA}\` (${COMMIT_LINK}) from main PR #${PR_NUM} (${PR_LINK})" >> $GITHUB_ENV
          else
            echo "PR_LINK=" >> $GITHUB_ENV

            echo "PR_BODY=Cherry-pick of commit \`${GITHUB_SHA}\` (${COMMIT_LINK}). This PR is not associated with any JIRA item." >> $GITHUB_ENV
          fi

      - name: Create PR into production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          gh pr create \
            --base production \
            --head prod-${TICKET} \
            --title "[prod] $PR_TITLE" \
            --body "$PR_BODY"


  # Job B: whenever production sees a revert commit, reproduce that revert on main.
  revert-on-main:
    if: ${{ github.ref == 'refs/heads/production' && startsWith(github.event.head_commit.message, 'Revert') }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract original & revert PR numbers
        id: extract_revert_pr
        shell: bash
        env:
          MSG: ${{ github.event.head_commit.message }}
        run: |
          set -euo pipefail

          echo "Commit message:"
          printf '%s\n' "$MSG"

          NUMS=( $(grep -oE '#[0-9]+' <<<"$MSG" | tr -d '#') )

          ORIGINAL_PR_NUM="${NUMS[0]:-}"
          REVERT_PR_NUM="${NUMS[1]:-}"

          if [ -z "$ORIGINAL_PR_NUM" ]; then
            echo "Couldn't find the original PR number (#NN) in message" >&2
            exit 1
          fi

          echo "ORIGINAL_PR_NUM=$ORIGINAL_PR_NUM"
          echo "REVERT_PR_NUM=$REVERT_PR_NUM"

          echo "ORIGINAL_PR_NUM=$ORIGINAL_PR_NUM" >> $GITHUB_ENV
          echo "REVERT_PR_NUM=$REVERT_PR_NUM" >> $GITHUB_ENV

      - name: Fetch and debug the production PR body
        id: fetch_pr_body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BODY=$(gh pr view "$ORIGINAL_PR_NUM" \
            --repo "$GITHUB_REPOSITORY" \
            --json body \
            --jq '.body // ""')
          echo "BODY_RAW<<EOF" >> $GITHUB_ENV
          echo "$BODY"          >> $GITHUB_ENV
          echo "EOF"            >> $GITHUB_ENV

      - name: Extract original main commit SHA
        shell: bash
        run: |
          set -euo pipefail

          # Now $BODY_RAW is a safe env var with *no* backticks processed
          echo "===== RAW PR BODY ====="
          printf '%s\n' "$BODY_RAW"
          echo "========================="

          mapfile -t IDS < <(grep -oE '[0-9a-f]{7,40}' <<<"$BODY_RAW")
          echo "üîé IDs found in PR body: ${IDS[*]:-none}"

          if [ "${#IDS[@]}" -eq 0 ]; then
            echo "‚ùå No SHA found in PR body; aborting" >&2
            exit 1
          fi

          MAIN_SHA="${IDS[0]}"
          echo "‚Ü™ MAIN_SHA=$MAIN_SHA"
          echo "MAIN_SHA=$MAIN_SHA" >> $GITHUB_ENV

      - name: Check out main
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Create revert branch
        id: get_revert_branch
        run: |
          set -euo pipefail
          BRANCH="revert-prod-${MAIN_SHA}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          git checkout -b "$BRANCH"

      - name: Configure committer
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Revert the main commit
        run: |
          set -euo pipefail
          git revert "$MAIN_SHA" --no-edit

      - name: Push revert branch
        run: |
          git push --set-upstream origin "revert-prod-${MAIN_SHA}"

      - name: Create revert PR on main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          EXISTING=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --state open \
            --head "revert-prod-${MAIN_SHA}" \
            --base main \
            --json number \
            --jq '.[0].number // ""')
          if [ -n "$EXISTING" ]; then
            echo "Revert PR already open: #$EXISTING ‚Äì skipping."
            exit 0
          fi

          REVERT_PR_LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${REVERT_PR_NUM}"

          gh auth setup-git
          gh pr create \
            --base main \
            --head "revert-prod-${MAIN_SHA}" \
            --title "Revert production revert of ${MAIN_SHA}" \
            --body "This reverts commit \`${MAIN_SHA}\`, due to a revert on production PR [#${REVERT_PR_NUM}](${REVERT_PR_LINK})."

  # # Job C: whenever main sees a revert and there‚Äôs an open PR for production, cherry-pick that same revert into that PR branch.
  propagate-main-revert-to-prod-branch:
    # only on pushes to main whose HEAD commit message begins with "revert" (any case)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'Revert') }}
    runs-on: ubuntu-latest
    env:
      FULL_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Dump trigger info
        run: |
          echo "Event:   $GITHUB_EVENT_NAME"
          echo "Ref:     $GITHUB_REF"
          echo "Message: $FULL_MSG"

      - name: Determine branch suffix (ticket or SHA)
        id: parse_branch_suffix
        shell: bash
        run: |
          set -euo pipefail

          MSG="${{ github.event.head_commit.message }}"
          echo "üîç Full commit message:"
          printf '%s\n\n' "$MSG"

          # try extracting the FIRST "(‚Ä¶)" where inside can be letters, digits or hyphens
          SUFFIX=$(grep -oE '\([A-Za-z0-9-]+\)' <<<"$MSG" | head -1 | tr -d '()')

          if [[ -n "$SUFFIX" ]]; then
            echo "‚Ü™ Found ticket suffix in subject: $SUFFIX"
          else
            echo "‚ö†Ô∏è  No ticket in subject; falling back to SHA from body‚Ä¶"
            # look for "/commit/<sha>" and strip the '/commit/' prefix
            SUFFIX=$(grep -oE '/commit/[0-9a-f]{7,40}' <<<"$MSG" \
                     | head -1 \
                     | sed 's#/commit/##')
            if [[ -z "$SUFFIX" ]]; then
              echo "‚ùå Failed to extract ticket or SHA; aborting." >&2
              exit 1
            fi
            echo "‚Ü™ Found SHA suffix in body: $SUFFIX"
          fi

          # export for later steps
          echo "BRANCH_SUFFIX=$SUFFIX" >> $GITHUB_ENV
          echo "‚úÖ Using branch suffix: $SUFFIX"

      - name: üì•  Fetch production & switch to prod-$BRANCH_SUFFIX
        run: |
          set -euo pipefail
          git fetch origin production
          git checkout production
          # fetch & switch; skip if no such branch exists
          if ! git fetch origin prod-${BRANCH_SUFFIX}:prod-${BRANCH_SUFFIX}; then
            echo "‚ùå prod-${BRANCH_SUFFIX} doesn‚Äôt exist ‚Üí skipping."
            exit 0
          fi
          git checkout prod-${BRANCH_SUFFIX}

      - name: üîç  Ensure there‚Äôs an open PR for prod-$BRANCH_SUFFIX
        id: check_pr
        run: |
          set -euo pipefail
          OPEN_PR=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --state open \
            --base production \
            --head prod-${BRANCH_SUFFIX} \
            --json number \
            --jq '.[0].number // ""')
          if [[ -z "$OPEN_PR" ]]; then
            echo "‚ùå No open PR for prod-${BRANCH_SUFFIX} ‚Üí skipping."
            exit 0
          fi
          echo "EXISTING_PR=$OPEN_PR" >> $GITHUB_ENV
          echo "‚Ü™ Found PR #$OPEN_PR"

      - name: üîÄ  Cherry-pick the revert
        run: |
          set -euo pipefail
          REV_SHA="$GITHUB_SHA"
          echo "‚Ü™ Cherry-picking $REV_SHA into prod-${BRANCH_SUFFIX}"
          if ! git cherry-pick "$REV_SHA" --allow-empty; then
            echo "‚ö†Ô∏è Conflict or no-op, aborting that cherry-pick."
            git cherry-pick --abort || true
            exit 0
          fi

      - name: ‚úçÔ∏è  Committer & push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin HEAD:prod-${BRANCH_SUFFIX}
