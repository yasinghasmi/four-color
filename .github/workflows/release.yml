name: main - production synchronization

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - production

jobs:
  # Job A: whenever main gets a new push (merge or commit), creating a PR to production
  create-production-pr:
    if: ${{ github.ref == 'refs/heads/main' &&  !startsWith(github.event.head_commit.message, 'Revert') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out main
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Get the squashed commit subject
        id: get_subject
        run: |
          SUBJECT=$(git log -1 --pretty=format:%s $GITHUB_SHA)
          echo "SUBJECT=$SUBJECT" >> $GITHUB_ENV

      - name: Extract PR number from subject
        id: get_pr_ref
        run: |
          set -euo pipefail
          PR_NUM=$(echo "$SUBJECT" | sed -nE 's/.*\(#([0-9]+)\).*/\1/p')
          echo "PR_NUM=$PR_NUM" >> $GITHUB_ENV

      - name: Derive clean title
        id: get_title
        run: |
          PR_TITLE=$(echo "$SUBJECT" | sed -E 's/ *\(#\d+\)$//')
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

      - name: Derive ticket key for branch name
        id: get_ticket
        run: |
          RAW_CONTENT=$(
            echo "$PR_TITLE" \
            | grep -oE '\([^)]+\)' \
            | head -n1 \
            | tr -d '()'
          )
          NUM=$(echo "$RAW_CONTENT" | grep -oE '[0-9]+' || echo '')
          if [ -n "$NUM" ]; then
            TICKET="EC-${NUM}"
          else
            TICKET="$GITHUB_SHA"
          fi
          echo "TICKET=$TICKET" >> $GITHUB_ENV

      - name: Fetch & switch to production
        run: |
          git fetch origin production
          git checkout production

      - name: Create & switch to prod-branch
        run: |
          BRANCH="prod-${TICKET}"
          git checkout -b "$BRANCH"

      - name: Configure Git committer
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry-pick the squashed commit
        run: |
          git remote add main_repo "${{ github.server_url }}/${{ github.repository }}.git"
          git fetch main_repo main
          git cherry-pick $GITHUB_SHA --allow-empty

      - name: Push prod-branch back to origin
        run: |
          git push --set-upstream origin "prod-${TICKET}"

      - name: Compute PR body text
        id: compute_body
        run: |
          set -euo pipefail

          COMMIT_LINK="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
          echo "COMMIT_LINK=$COMMIT_LINK" >> $GITHUB_ENV

          if [ -n "$PR_NUM" ]; then
            PR_LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${PR_NUM}"
            echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV

            echo "PR_BODY=Cherry-pick of commit \`${GITHUB_SHA}\` (${COMMIT_LINK}) from ${PR_LINK}" >> $GITHUB_ENV
          else
            echo "PR_LINK=" >> $GITHUB_ENV

            echo "PR_BODY=Cherry-pick of commit \`${GITHUB_SHA}\` (${COMMIT_LINK}). This PR is not associated with any JIRA item." >> $GITHUB_ENV
          fi

      - name: Create PR into production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          gh pr create \
            --base production \
            --head prod-${TICKET} \
            --title "[prod] $PR_TITLE" \
            --body "$PR_BODY"


  # Job B: whenever production sees a revert commit, reproduce that revert on main.
  revert-on-production:
    if: ${{ github.ref == 'refs/heads/production' && startsWith(github.event.head_commit.message, 'Revert') &&  github.event.head_commit.committer.username != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: production
          fetch-depth: 0

      - name: Extract original & revert PR numbers
        id: extract_revert_pr
        shell: bash
        env:
          MSG: ${{ github.event.head_commit.message }}
        run: |
          set -euo pipefail

          NUMS=( $(grep -oE '#[0-9]+' <<<"$MSG" | tr -d '#') )

          LAST_TWO=( "${NUMS[@]: -2}" )
          ORIGINAL_PR_NUM=${LAST_TWO[0]}
          REVERT_PR_NUM=${LAST_TWO[1]}

          if [ -z "$ORIGINAL_PR_NUM" ]; then
            echo "Couldn't find the original PR number in message" >&2
            exit 1
          fi

          echo "ORIGINAL_PR_NUM=$ORIGINAL_PR_NUM" >> $GITHUB_ENV
          echo "REVERT_PR_NUM=$REVERT_PR_NUM" >> $GITHUB_ENV

      - name: Fetch and debug the production PR body
        id: fetch_pr_body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BODY=$(gh pr view "$ORIGINAL_PR_NUM" \
            --repo "$GITHUB_REPOSITORY" \
            --json body \
            --jq '.body // ""')
          echo "BODY_RAW<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Extract original main commit SHA
        shell: bash
        run: |
          set -euo pipefail

          mapfile -t IDS < <(grep -oE '[0-9a-f]{7,40}' <<<"$BODY_RAW")

          if [ "${#IDS[@]}" -eq 0 ]; then
            echo "No SHA found in PR body; aborting" >&2
            exit 1
          fi

          MAIN_SHA="${IDS[0]}"
          echo "MAIN_SHA=$MAIN_SHA" >> $GITHUB_ENV

      - name: Check out main
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Create revert branch
        id: get_revert_branch
        run: |
          set -euo pipefail
          BRANCH="revert-from-prod-${MAIN_SHA}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          git checkout -b "$BRANCH"

      - name: Configure committer
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Revert the main commit
        run: |
          set -euo pipefail
          git revert "$MAIN_SHA" --no-edit

      - name: Push revert branch
        run: |
          git push --set-upstream origin "revert-from-prod-${MAIN_SHA}"

      - name: Create revert PR on main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          EXISTING=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --state open \
            --head "revert-from-prod-${MAIN_SHA}" \
            --base main \
            --json number \
            --jq '.[0].number // ""')

          if [ -n "$EXISTING" ]; then
            echo "Revert PR already open."
            exit 0
          fi

          REVERT_PR_LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${REVERT_PR_NUM}"

          gh auth setup-git
          gh pr create \
            --base main \
            --head "revert-from-prod-${MAIN_SHA}" \
            --title "[main] production revert of ${MAIN_SHA}" \
            --body "This reverts commit \`${MAIN_SHA}\`, due to a revert on production PR [#${REVERT_PR_NUM}](${REVERT_PR_LINK})." \

  # Job C: whenever main sees a revert (from PR or commit) and there’s an open PR for production, cherry-pick that same revert into that PR branch, or create a new
  # PR when non exists. The key here is the word Revert in the commit message.
  revert-on-main:
    if: ${{ github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'Revert') && github.event.head_commit.committer.username != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    env:
      FULL_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Determine branch suffix (ticket or SHA)
        id: parse_branch_suffix
        shell: bash
        env:
          MSG: ${{ github.event.head_commit.message }}
        run: |
          set -euo pipefail

          if [[ "$MSG" =~ \([Ee][Cc][-_]?([0-9]+)\) ]]; then
            SUFFIX="EC-${BASH_REMATCH[1]}"
          elif [[ "$MSG" =~ commit[[:space:]]([0-9a-f]{7,40}) ]]; then
            SUFFIX="${BASH_REMATCH[1]}"
          else
            echo "Could not extract a ticket number or SHA; aborting." >&2
            exit 1
          fi

          echo "BRANCH_SUFFIX=$SUFFIX" >> $GITHUB_ENV

      - name: Fetch production & switch to prod-$BRANCH_SUFFIX
        run: |
          set -euo pipefail
          git fetch origin production
          git checkout production
          if ! git fetch origin prod-${BRANCH_SUFFIX}:prod-${BRANCH_SUFFIX}; then
            echo "prod-${BRANCH_SUFFIX} doesn’t exist."
            exit 0
          fi
          git checkout prod-${BRANCH_SUFFIX}

      - name: Configure Git committer
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry-pick the revert
        run: |
          set -euo pipefail
          REV_SHA="$GITHUB_SHA"
          echo "↪ Cherry-picking $REV_SHA into prod-${BRANCH_SUFFIX}"
          if ! git cherry-pick "$REV_SHA" --allow-empty; then
            echo "cherry-pick failed."
            git cherry-pick --abort || true
            exit 0
          fi

      - name: push
        run: |
          git push origin HEAD:prod-${BRANCH_SUFFIX}

      - name: PR creation (if doesn't exist)
        id: check_or_create_pr
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          EXISTING=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --state open \
            --base production \
            --head prod-${BRANCH_SUFFIX} \
            --json number \
            --jq '.[0].number // ""')

          if [[ -n "$EXISTING" ]]; then
            exit 0
          fi

          gh auth setup-git
          gh pr create \
            --repo "$GITHUB_REPOSITORY" \
            --base production \
            --head prod-${BRANCH_SUFFIX} \
            --title "[prod] Cherry-pick revert of $GITHUB_SHA" \
            --body "Cherry-pick of revert commit \`${GITHUB_SHA}\` (https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}) from main." \
