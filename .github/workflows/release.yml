name: main - production synchronization

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
      - production

jobs:
  # Job A: whenever main gets a new push (merge or commit), creating a PR to production
  create-production-pr:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out main 
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the squashed commit subject
        id: get_subject
        run: |
          SUBJECT=$(git log -1 --pretty=format:%s $GITHUB_SHA)
          echo "SUBJECT=$SUBJECT" >> $GITHUB_ENV

      - name: Extract PR-ref suffix and number
        id: get_pr_ref
        run: |
          PR_REF=$(echo "$SUBJECT" | grep -oE '\(#\d+\)' || echo '')
          PR_NUM=$(echo "$PR_REF" | grep -oE '\d+' || echo '')
          echo "PR_REF=$PR_REF" >> $GITHUB_ENV
          echo "PR_NUM=$PR_NUM" >> $GITHUB_ENV

      - name: Derive clean title
        id: get_title
        run: |
          PR_TITLE=$(echo "$SUBJECT" | sed -E 's/ *\(#\d+\)$//')
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV

      - name: Derive ticket key for branch name
        id: get_ticket
        run: |
          RAW_CONTENT=$(
            echo "$PR_TITLE" \
            | grep -oE '\([^)]+\)' \
            | head -n1 \
            | tr -d '()'
          )
          NUM=$(echo "$RAW_CONTENT" | grep -oE '[0-9]+' || echo '')
          if [ -n "$NUM" ]; then
            TICKET="EC-${NUM}"
          else
            TICKET="$GITHUB_SHA"
          fi
          echo "Derived raw content:   $RAW_CONTENT"
          echo "Sanitized branch suffix: $TICKET"
          echo "TICKET=$TICKET" >> $GITHUB_ENV

      - name: Fetch & switch to production
        run: |
          git fetch origin production
          git checkout production

      - name: Create & switch to prod-branch
        run: |
          BRANCH="prod-${TICKET}"
          echo "Creating branch $BRANCH"
          git checkout -b "$BRANCH"

      - name: Configure Git committer
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry-pick the squashed commit
        run: |
          git remote add main_repo "${{ github.server_url }}/${{ github.repository }}.git"
          git fetch main_repo main
          git cherry-pick $GITHUB_SHA --allow-empty

      - name: Push prod-branch back to origin
        run: |
          git push --set-upstream origin "prod-${TICKET}"

      - name: Compute PR body text
        id: compute_body
        run: |
          if [ -n "$PR_NUM" ]; then
            echo "PR_BODY=main PR: https://github.com/${GITHUB_REPOSITORY}/pull/$PR_NUM" >> $GITHUB_ENV
          else
            echo "PR_BODY=Cherry-pick of commit https://github.com/${GITHUB_REPOSITORY}/commit/$GITHUB_SHA" >> $GITHUB_ENV
          fi

      - name: Create PR into production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          gh pr create \
            --base production \
            --head prod-${TICKET} \
            --title "[prod] $PR_TITLE" \
            --body "$PR_BODY"


  # # Job B: whenever production sees a revert commit,
  # # reproduce that revert on main.
  # revert-on-main:
  #   if: >
  #     github.ref == 'refs/heads/production' &&
  #     startsWith(github.event.head_commit.message, 'Revert')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract SHA being reverted
  #       run: |
  #         SHA=$(echo "${{ github.event.head_commit.message }}" | grep -oE '[0-9a-f]{7,40}' | head -1)
  #         echo "REVERTED_SHA=$SHA" >> $GITHUB_ENV

  #     - name: Check out main
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main
  #         fetch-depth: 0

  #     - name: Revert that SHA on main
  #       run: |
  #         cd .
  #         git checkout -b revert-prod-${{ env.REVERTED_SHA }}
  #         git revert ${{ env.REVERTED_SHA }} --no-edit

  #     - name: Push & open revert PR on main
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         title: 'Revert production revert of ${{ env.REVERTED_SHA }}'
  #         body: |
  #           This PR reverts the production revert of commit `${{ env.REVERTED_SHA }}` to keep main in sync.
  #         base: main
  #         head: main/revert-prod-${{ env.REVERTED_SHA }}

  # # Job C: whenever main sees a revert and thereâ€™s an open cherry-pick PR
  # # on production, cherry-pick that same revert into that PR branch.
  # propagate-main-revert-to-prod-branch:
  #   if: >
  #     github.ref == 'refs/heads/main' &&
  #     startsWith(github.event.head_commit.message, 'Revert')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract main-revert SHA
  #       run: |
  #         SHA=$(echo "${{ github.event.head_commit.message }}" | grep -oE '[0-9a-f]{7,40}' | head -1)
  #         echo "MAIN_REVERTED_SHA=$SHA" >> $GITHUB_ENV

  #     - name: Find open prod PR via GitHub API
  #       uses: actions/github-script@v6
  #       id: find_pr
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const sha = process.env.MAIN_REVERTED_SHA;
  #           const prs = await github.rest.pulls.list({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             state: 'open',
  #             base: 'production'
  #           });
  #           const pr = prs.data.find(p => p.head.ref.includes(sha));
  #           if (!pr) return;
  #           return { number: pr.number, head: pr.head.ref };

  #     - name: Skip if no matching prod PR
  #       if: ${{ !steps.find_pr.outputs.number }}
  #       run: echo "No open production PR for SHA ${{ env.MAIN_REVERTED_SHA }}, skipping."

  #     - name: Check out the prod PR branch
  #       if: ${{ steps.find_pr.outputs.number }}
  #       uses: actions/checkout@v3
  #       with:
  #         ref: production
  #         fetch-depth: 0
  #         path: production

  #     - name: Cherry-pick the main revert into that branch
  #       if: ${{ steps.find_pr.outputs.number }}
  #       run: |
  #         cd production
  #         git fetch origin pull/${{ steps.find_pr.outputs.number }}/head:tmp-pr
  #         git checkout tmp-pr
  #         git cherry-pick ${{ env.MAIN_REVERTED_SHA }} --allow-empty
  #         git push origin tmp-pr:pr-${{ steps.find_pr.outputs.number }}

      # - name: Check for reverted pr
      #   run: |
      #     git_msg="${{ github.event.head_commit.message }}"
      #     if [[ "$git_msg" =~ [Rr]evert ]]; then
      #       echo "Reverted PR identified"
      #     else
      #       echo "No PR to revert available"
      #       exit 1
      #     fi     